<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TinyLittleMvvm</name>
    </assembly>
    <members>
        <member name="T:TinyLittleMvvm.Logging.ILog">
            <summary>
            Simple interface that represent a logger.
            </summary>
        </member>
        <member name="M:TinyLittleMvvm.Logging.ILog.Log(TinyLittleMvvm.Logging.LogLevel,System.Func{System.String},System.Exception,System.Object[])">
            <summary>
            Log a message the specified log level.
            </summary>
            <param name="logLevel">The log level.</param>
            <param name="messageFunc">The message function.</param>
            <param name="exception">An optional exception.</param>
            <param name="formatParameters">Optional format parameters for the message generated by the messagefunc. </param>
            <returns>true if the message was logged. Otherwise false.</returns>
            <remarks>
            Note to implementers: the message func should not be called if the loglevel is not enabled
            so as not to incur performance penalties.
            
            To check IsEnabled call Log with only LogLevel and check the return value, no event will be written.
            </remarks>
        </member>
        <member name="T:TinyLittleMvvm.Logging.LogLevel">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="T:TinyLittleMvvm.Logging.ILogProvider">
            <summary>
            Represents a way to get a <see cref="T:TinyLittleMvvm.Logging.ILog"/>
            </summary>
        </member>
        <member name="M:TinyLittleMvvm.Logging.ILogProvider.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference.</returns>
        </member>
        <member name="M:TinyLittleMvvm.Logging.ILogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>A disposable that when disposed removes the message from the context.</returns>
        </member>
        <member name="M:TinyLittleMvvm.Logging.ILogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>A disposable that when disposed removes the map from the context.</returns>
        </member>
        <member name="T:TinyLittleMvvm.Logging.LogProvider">
            <summary>
            Provides a mechanism to create instances of <see cref="T:TinyLittleMvvm.Logging.ILog" /> objects.
            </summary>
        </member>
        <member name="M:TinyLittleMvvm.Logging.LogProvider.SetCurrentLogProvider(TinyLittleMvvm.Logging.ILogProvider)">
            <summary>
            Sets the current log provider.
            </summary>
            <param name="logProvider">The log provider.</param>
        </member>
        <member name="P:TinyLittleMvvm.Logging.LogProvider.IsDisabled">
            <summary>
            Gets or sets a value indicating whether this is logging is disabled.
            </summary>
            <value>
            <c>true</c> if logging is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:TinyLittleMvvm.Logging.LogProvider.OnCurrentLogProviderSet">
            <summary>
            Sets an action that is invoked when a consumer of your library has called SetCurrentLogProvider. It is 
            important that hook into this if you are using child libraries (especially ilmerged ones) that are using
            LibLog (or other logging abstraction) so you adapt and delegate to them.
            <see cref="M:TinyLittleMvvm.Logging.LogProvider.SetCurrentLogProvider(TinyLittleMvvm.Logging.ILogProvider)"/> 
            </summary>
        </member>
        <member name="M:TinyLittleMvvm.Logging.LogProvider.For``1">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <typeparam name="T">The type whose name will be used for the logger.</typeparam>
            <returns>An instance of <see cref="T:TinyLittleMvvm.Logging.ILog"/></returns>
        </member>
        <member name="M:TinyLittleMvvm.Logging.LogProvider.GetCurrentClassLogger">
            <summary>
            Gets a logger for the current class.
            </summary>
            <returns>An instance of <see cref="T:TinyLittleMvvm.Logging.ILog"/></returns>
        </member>
        <member name="M:TinyLittleMvvm.Logging.LogProvider.GetLogger(System.Type,System.String)">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <param name="type">The type whose name will be used for the logger.</param>
            <param name="fallbackTypeName">If the type is null then this name will be used as the log name instead</param>
            <returns>An instance of <see cref="T:TinyLittleMvvm.Logging.ILog"/></returns>
        </member>
        <member name="M:TinyLittleMvvm.Logging.LogProvider.GetLogger(System.String)">
            <summary>
            Gets a logger with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>An instance of <see cref="T:TinyLittleMvvm.Logging.ILog"/></returns>
        </member>
        <member name="M:TinyLittleMvvm.Logging.LogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context.
            </summary>
            <param name="message">A message.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="M:TinyLittleMvvm.Logging.LogProvider.OpenMappedContext(System.String,System.String)">
            <summary>
            Opens a mapped diagnostics context.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="T:TinyLittleMvvm.Logging.LogProviders.LoupeLogProvider.WriteDelegate">
            <summary>
            The form of the Loupe Log.Write method we're using
            </summary>
        </member>
        <member name="P:TinyLittleMvvm.Logging.LogProviders.LoupeLogProvider.ProviderIsAvailableOverride">
            <summary>
            Gets or sets a value indicating whether [provider is available override]. Used in tests.
            </summary>
            <value>
            <c>true</c> if [provider is available override]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:TinyLittleMvvm.Logging.LogProviders.LogMessageFormatter.SimulateStructuredLogging(System.Func{System.String},System.Object[])">
            <summary>
            Some logging frameworks support structured logging, such as serilog. This will allow you to add names to structured data in a format string:
            For example: Log("Log message to {user}", user). This only works with serilog, but as the user of LibLog, you don't know if serilog is actually 
            used. So, this class simulates that. it will replace any text in {curly braces} with an index number. 
            
            "Log {message} to {user}" would turn into => "Log {0} to {1}". Then the format parameters are handled using regular .net string.Format.
            </summary>
            <param name="messageBuilder">The message builder.</param>
            <param name="formatParameters">The format parameters.</param>
            <returns></returns>
        </member>
        <member name="T:TinyLittleMvvm.BootstrapperBase">
            <summary>
            Base class for bootstrapper. DON'T INHERIT FROM THIS CLASS BUT <see cref="T:TinyLittleMvvm.BootstrapperBase`1"/>.
            </summary>
        </member>
        <member name="M:TinyLittleMvvm.BootstrapperBase.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:TinyLittleMvvm.BootstrapperBase.Container">
            <summary>
            The Autofac container used by the application.
            </summary>
        </member>
        <member name="M:TinyLittleMvvm.BootstrapperBase.ConfigureContainer(Autofac.ContainerBuilder)">
            <summary>
            This methods allows the inherited class to register her/his classes.
            </summary>
            <param name="builder"></param>
        </member>
        <member name="M:TinyLittleMvvm.BootstrapperBase.OnStartup(System.Object,System.Windows.StartupEventArgs)">
            <summary>
            Called when the Run method of the Application object is called.
            </summary>
            <param name="sender">The sender of the <see cref="E:System.Windows.Application.Startup"/> event.</param>
            <param name="e">Contains the arguments of the Startup event.</param>
        </member>
        <member name="M:TinyLittleMvvm.BootstrapperBase.OnExit(System.Object,System.Windows.ExitEventArgs)">
            <summary>
            Called just before an application shuts down, and cannot be canceled.
            </summary>
            <param name="sender">The sender of the <see cref="E:System.Windows.Application.Exit"/> event.</param>
            <param name="e">Contains the arguments of the Exit event.</param>
        </member>
        <member name="T:TinyLittleMvvm.BootstrapperBase`1">
            <summary>
            Base class for bootstrapper.
            </summary>
            <typeparam name="TViewModel">The type of the main window's view model.</typeparam>
        </member>
        <member name="M:TinyLittleMvvm.BootstrapperBase`1.ConfigureContainer(Autofac.ContainerBuilder)">
            <inheritdoc />
        </member>
        <member name="M:TinyLittleMvvm.BootstrapperBase`1.OnStartup(System.Object,System.Windows.StartupEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:TinyLittleMvvm.BootstrapperBase`1.TinyLittleMvvm#IUiExecution#Execute(System.Action)">
            <inheritdoc />
        </member>
        <member name="M:TinyLittleMvvm.BootstrapperBase`1.ExecuteAsync(System.Action)">
            <inheritdoc />
        </member>
        <member name="T:TinyLittleMvvm.DialogViewModel">
            <summary>
            Base class for dialog view models without a specific result.
            </summary>
        </member>
        <member name="M:TinyLittleMvvm.DialogViewModel.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:TinyLittleMvvm.DialogViewModel.Close">
            <summary>
            Completes the <see cref="P:TinyLittleMvvm.DialogViewModel.Task"/> and raises the <see cref="E:TinyLittleMvvm.DialogViewModel.Closed"/> event.
            </summary>
        </member>
        <member name="P:TinyLittleMvvm.DialogViewModel.Task">
            <summary>
            A task promising the closing the dialog view model. It is completed when <see cref="M:TinyLittleMvvm.DialogViewModel.Close"/> was called.
            </summary>
        </member>
        <member name="E:TinyLittleMvvm.DialogViewModel.Closed">
            <summary>
            This event is raised when the dialog was closed.
            </summary>
        </member>
        <member name="T:TinyLittleMvvm.DialogViewModel`1">
            <summary>
            Base class for dialog view models returning a result.
            </summary>
        </member>
        <member name="M:TinyLittleMvvm.DialogViewModel`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:TinyLittleMvvm.DialogViewModel`1.Close(`0)">
            <summary>
            Completes the <see cref="P:TinyLittleMvvm.DialogViewModel.Task"/> with the given result and raises the <see cref="E:TinyLittleMvvm.DialogViewModel`1.Closed"/> event.
            </summary>
        </member>
        <member name="P:TinyLittleMvvm.DialogViewModel`1.Task">
            <summary>
            A task promising the result of the dialog view model. It is completed when <see cref="M:TinyLittleMvvm.DialogViewModel`1.Close(`0)"/> was called.
            </summary>
        </member>
        <member name="E:TinyLittleMvvm.DialogViewModel`1.Closed">
            <summary>
            This event is raised when the dialog was closed.
            </summary>
        </member>
        <member name="T:TinyLittleMvvm.IDialogManager">
            <summary>
            Declares methods to show dialogs.
            </summary>
        </member>
        <member name="M:TinyLittleMvvm.IDialogManager.ShowDialogAsync(TinyLittleMvvm.DialogViewModel,MahApps.Metro.Controls.Dialogs.MetroDialogSettings)">
            <summary>
            Shows a dialog asynchronously.
            </summary>
            <remarks>
            <para>
            This method uses <see cref="T:TinyLittleMvvm.ViewLocator"/> to get the view matching the given view model. That view must
            derive from <see cref="T:MahApps.Metro.Controls.Dialogs.BaseMetroDialog"/>.
            </para>
            <para>
            The <a href="http://mahapps.com/controls/buttons.html">MahApps.Metro style "FlatButton"</a> will be added
            to the view's resources.
            </para>
            </remarks>
            <param name="viewModel">The view model for the view to be displayed.</param>
            <param name="settings">An optional pre-defined settings instance.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> object which is completed when the dialog is closed.</returns>
        </member>
        <member name="M:TinyLittleMvvm.IDialogManager.ShowDialogAsync``1(MahApps.Metro.Controls.Dialogs.MetroDialogSettings)">
            <summary>
            Shows a dialog asynchronously.
            </summary>
            <remarks>
            <para>
            This method uses <see cref="T:TinyLittleMvvm.ViewLocator"/> to get the view matching the given view model. That view must
            derive from <see cref="T:MahApps.Metro.Controls.Dialogs.BaseMetroDialog"/>.
            </para>
            <para>
            The <a href="http://mahapps.com/controls/buttons.html">MahApps.Metro style "FlatButton"</a> will be added
            to the view's resources.
            </para>
            </remarks>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
            <param name="settings">An optional pre-defined settings instance.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> object which is completed when the dialog is closed.</returns>
        </member>
        <member name="M:TinyLittleMvvm.IDialogManager.ShowDialogAsync``1(TinyLittleMvvm.DialogViewModel{``0},MahApps.Metro.Controls.Dialogs.MetroDialogSettings)">
            <summary>
            Shows a dialog asynchronously.
            </summary>
            <remarks>
            <para>
            This method uses <see cref="T:TinyLittleMvvm.ViewLocator"/> to get the view matching the given view model. That view must
            derive from <see cref="T:MahApps.Metro.Controls.Dialogs.BaseMetroDialog"/>.
            </para>
            <para>
            The <a href="http://mahapps.com/controls/buttons.html">MahApps.Metro style "FlatButton"</a> will be added
            to the view's resources.
            </para>
            </remarks>
            <param name="viewModel">The view model for the view to be displayed.</param>
            <param name="settings">An optional pre-defined settings instance.</param>
            <typeparam name="TResult">The type of the view model's result.</typeparam>
            <returns>The result of the view model.</returns>
        </member>
        <member name="M:TinyLittleMvvm.IDialogManager.ShowDialogAsync``2(MahApps.Metro.Controls.Dialogs.MetroDialogSettings)">
            <summary>
            Shows a dialog asynchronously.
            </summary>
            <remarks>
            <para>
            This method uses <see cref="T:TinyLittleMvvm.ViewLocator"/> to get the view matching the given view model. That view must
            derive from <see cref="T:MahApps.Metro.Controls.Dialogs.BaseMetroDialog"/>.
            </para>
            <para>
            The <a href="http://mahapps.com/controls/buttons.html">MahApps.Metro style "FlatButton"</a> will be added
            to the view's resources.
            </para>
            </remarks>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
            <typeparam name="TResult">The type of the view model's result.</typeparam>
            <param name="settings">An optional pre-defined settings instance.</param>
            <returns>The result of the view model.</returns>
        </member>
        <member name="M:TinyLittleMvvm.IDialogManager.ShowMessageBox(System.String,System.String,MahApps.Metro.Controls.Dialogs.MessageDialogStyle,MahApps.Metro.Controls.Dialogs.MetroDialogSettings)">
            <summary>
            Displays a message box asynchronously.
            </summary>
            <param name="title">The title of the message box.</param>
            <param name="message">The content of the message box.</param>
            <param name="style">The style of the message box.</param>
            <param name="settings">Option settings for the message box.</param>
            <returns>A task promising the result of which button was pressed.</returns>
        </member>
        <member name="T:TinyLittleMvvm.IDialogViewModel">
            <summary>
            Interface for dialog view models.
            </summary>
        </member>
        <member name="E:TinyLittleMvvm.IDialogViewModel.Closed">
            <summary>
            This event is raised when the dialog was closed.
            </summary>
        </member>
        <member name="T:TinyLittleMvvm.IFlyoutManager">
            <summary>
            Declares the methods for showing <a href="http://mahapps.com/controls/flyouts.html">flyouts</a>.
            </summary>
        </member>
        <member name="M:TinyLittleMvvm.IFlyoutManager.ShowFlyout(TinyLittleMvvm.DialogViewModel)">
            <summary>
            Shows a flyout for the given view model.
            </summary>
            <param name="viewModel">The view model for the flyout to be displayed.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> object which is completed when the flyout is closed.</returns>
        </member>
        <member name="M:TinyLittleMvvm.IFlyoutManager.ShowFlyout``1">
            <summary>
            Shows a flyout for the given view model type.
            </summary>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> object which is completed when the flyout is closed.</returns>
        </member>
        <member name="M:TinyLittleMvvm.IFlyoutManager.ShowFlyout``1(TinyLittleMvvm.DialogViewModel{``0})">
            <summary>
            Shows a flyout for the given view model.
            </summary>
            <param name="viewModel">The view model for the flyout to be displayed.</param>
            <typeparam name="TResult">The type of the flyout's result</typeparam>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object promising the result of the view model when the flyout is closed.</returns>
        </member>
        <member name="M:TinyLittleMvvm.IFlyoutManager.ShowFlyout``2">
            <summary>
            Shows a flyout for the given view model type.
            </summary>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
            <typeparam name="TResult">The type of the flyout's result</typeparam>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> object promising the result of the view model when the flyout is closed.</returns>
        </member>
        <member name="T:TinyLittleMvvm.IOnClosingHandler">
            <summary>
            This interface can be implemented by view models, which want to be notified when
            the corresponding view is about to be closed.
            </summary>
        </member>
        <member name="M:TinyLittleMvvm.IOnClosingHandler.OnClosing">
            <summary>
            This method is called when the corresponding view closes.
            </summary>
            <remarks>
            When the corresponding view is a <see cref="T:System.Windows.Window"/>, this method is called when <see cref="M:System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)"/>
            is raised; otherwise, when <see cref="E:System.Windows.FrameworkElement.Unloaded"/> is raised.
            </remarks>
            <remarks>If you want to intercept when the corresponding window is about to be closed,
            use <see cref="T:TinyLittleMvvm.ICancelableOnClosingHandler"/>.</remarks>
        </member>
        <member name="T:TinyLittleMvvm.ICancelableOnClosingHandler">
            <summary>
            This interface can be implemented by view models, which want to be notified when
            the corresponding window is about to be closed.
            </summary>
        </member>
        <member name="M:TinyLittleMvvm.ICancelableOnClosingHandler.OnClosing">
            <summary>
            This method is called when the corresponding view's <see cref="E:System.Windows.Window.Closing"/> event was raised.
            </summary>
            <returns><see landword="true"/> the the window can be closed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:TinyLittleMvvm.IOnLoadedHandler">
            <summary>
            This interface can be implemented by view models, which want to be notified when
            the corresponding view was loaded.
            </summary>
        </member>
        <member name="M:TinyLittleMvvm.IOnLoadedHandler.OnLoadedAsync">
            <summary>
            This method is called when the corresponding view's <see cref="E:System.Windows.Window.Closing"/> or
            <see cref="E:System.Windows.FrameworkElement.Unloaded"/> event was raised.
            </summary>
            <returns></returns>
        </member>
        <member name="T:TinyLittleMvvm.IUiExecution">
            <summary>
            Provides an method to execute an action in the dispatcher thread.
            </summary>
        </member>
        <member name="M:TinyLittleMvvm.IUiExecution.Execute(System.Action)">
            <summary>
            Executes the passed action in the dispatcher thread.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="M:TinyLittleMvvm.IUiExecution.ExecuteAsync(System.Action)">
            <summary>
            Executes the passed action in the dispatcher thread asynchronously.
            </summary>
            <param name="action">The action to execute.</param>
        </member>
        <member name="T:TinyLittleMvvm.IWindowManager">
            <summary>
            Declares methods to show windows.
            </summary>
        </member>
        <member name="M:TinyLittleMvvm.IWindowManager.ShowWindow``1(System.Windows.Window)">
            <summary>
            Shows a window for a given view model type.
            </summary>
            <param name="owningWindow">An optional owner for the new window.</param>
            <typeparam name="TViewModel">The type of the view model.</typeparam>
            <returns>The window.</returns>
        </member>
        <member name="M:TinyLittleMvvm.IWindowManager.ShowWindow(System.Object,System.Windows.Window)">
            <summary>
            Shows a window for a given view model object.
            </summary>
            <param name="viewModel">The view model for the window to be displayed.</param>
            <param name="owningWindow">An optional owner for the new window.</param>
            <returns>The window.</returns>
        </member>
        <member name="T:TinyLittleMvvm.PropertyChangedBase">
            <summary>
            Base class implementing <see cref="T:System.ComponentModel.INotifyPropertyChanged"/>.
            </summary>
        </member>
        <member name="E:TinyLittleMvvm.PropertyChangedBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:TinyLittleMvvm.PropertyChangedBase.Refresh">
            <summary>
            Notifies clients that all properties may have changed.
            </summary>
            <remarks>
            This method raises the <see cref="E:TinyLittleMvvm.PropertyChangedBase.PropertyChanged"/> event with <see cref="F:System.String.Empty"/> as the property name.
            </remarks>
        </member>
        <member name="M:TinyLittleMvvm.PropertyChangedBase.NotifyOfPropertyChange(System.String)">
            <summary>
            Raises the <see cref="E:TinyLittleMvvm.PropertyChangedBase.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">The name of the changed property.</param>
        </member>
        <member name="M:TinyLittleMvvm.PropertyChangedBase.NotifyOfPropertyChange``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Raises the <see cref="E:TinyLittleMvvm.PropertyChangedBase.PropertyChanged"/> event.
            </summary>
            <param name="property">The changed property.</param>
            <typeparam name="TProperty">The type of the changed property.</typeparam>
        </member>
        <member name="T:TinyLittleMvvm.ExpressionHelper">
            <summary>
            Extension methods for <see cref="T:System.Linq.Expressions.Expression"/>s.
            </summary>
        </member>
        <member name="M:TinyLittleMvvm.ExpressionHelper.GetMemberName``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Gets the name of a class' property.
            </summary>
            <param name="property">The porperty.</param>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <returns>The name of the property.</returns>
        </member>
        <member name="M:TinyLittleMvvm.ExpressionHelper.GetMemberName``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Gets the name of a class' property.
            </summary>
            <param name="property">The porperty.</param>
            <typeparam name="TEntity">The type of the class owning the property.</typeparam>
            <typeparam name="TProperty">The type of the property.</typeparam>
            <returns>The name of the property.</returns>
        </member>
        <member name="T:TinyLittleMvvm.RelayCommand">
            <summary>
            A command whose sole purpose is to relay its functionality to other
            objects by invoking delegates. The default return value for the CanExecute
            method is 'true'.  This class does not allow you to accept command parameters in the
            Execute and CanExecute callback methods.
            </summary>
        </member>
        <member name="M:TinyLittleMvvm.RelayCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the RelayCommand class.
            </summary>
            <param name="execute">The execution logic.</param>
            <param name="canExecute">The execution status logic.</param>
            <exception cref="T:System.ArgumentNullException">If the execute argument is null.</exception>
        </member>
        <member name="E:TinyLittleMvvm.RelayCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether the command should execute.
            </summary>
        </member>
        <member name="M:TinyLittleMvvm.RelayCommand.RaiseCanExecuteChanged">
            <summary>
            Raises the <see cref="E:TinyLittleMvvm.RelayCommand.CanExecuteChanged"/> event.
            </summary>
        </member>
        <member name="M:TinyLittleMvvm.RelayCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">This parameter will always be ignored.</param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="M:TinyLittleMvvm.RelayCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">This parameter will always be ignored.</param>
        </member>
        <member name="T:TinyLittleMvvm.AsyncRelayCommand">
            <summary>
            A command whose sole purpose is to relay its functionality to other
            objects by invoking delegates. The default return value for the CanExecute
            method is 'true'.  This class does not allow you to accept command parameters in the
            Execute and CanExecute callback methods.
            </summary>
        </member>
        <member name="M:TinyLittleMvvm.AsyncRelayCommand.#ctor(System.Func{System.Threading.Tasks.Task},System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the RelayCommand class.
            </summary>
            <param name="execute">The execution logic.</param>
            <param name="canExecute">The execution status logic.</param>
            <exception cref="T:System.ArgumentNullException">If the execute argument is null.</exception>
        </member>
        <member name="E:TinyLittleMvvm.AsyncRelayCommand.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether the command should execute.
            </summary>
        </member>
        <member name="M:TinyLittleMvvm.AsyncRelayCommand.RaiseCanExecuteChanged">
            <summary>
            Raises the <see cref="E:TinyLittleMvvm.AsyncRelayCommand.CanExecuteChanged"/> event.
            </summary>
        </member>
        <member name="M:TinyLittleMvvm.AsyncRelayCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">This parameter will always be ignored.</param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="M:TinyLittleMvvm.AsyncRelayCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">This parameter will always be ignored.</param>
        </member>
        <member name="T:TinyLittleMvvm.RelayCommand`1">
            <summary>
            A generic command whose sole purpose is to relay its functionality to other
            objects by invoking delegates. The default return value for the CanExecute
            method is 'true'. This class allows you to accept command parameters in the
            Execute and CanExecute callback methods.
            </summary>
            <typeparam name="T">The type of the command parameter.</typeparam>
        </member>
        <member name="M:TinyLittleMvvm.RelayCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the RelayCommand class.
            </summary>
            <param name="execute">The execution logic.</param>
            <param name="canExecute">The execution status logic.</param>
            <exception cref="T:System.ArgumentNullException">If the execute argument is null.</exception>
        </member>
        <member name="E:TinyLittleMvvm.RelayCommand`1.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether the command should execute.
            </summary>
        </member>
        <member name="M:TinyLittleMvvm.RelayCommand`1.RaiseCanExecuteChanged">
            <summary>
            Raises the <see cref="E:TinyLittleMvvm.RelayCommand`1.CanExecuteChanged" /> event.
            </summary>
        </member>
        <member name="M:TinyLittleMvvm.RelayCommand`1.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data 
            to be passed, this object can be set to a null reference</param>
            <returns>true if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="M:TinyLittleMvvm.RelayCommand`1.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked. 
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data 
            to be passed, this object can be set to a null reference</param>
        </member>
        <member name="T:TinyLittleMvvm.AsyncRelayCommand`1">
            <summary>
            A generic command whose sole purpose is to relay its functionality to other
            objects by invoking delegates. The default return value for the CanExecute
            method is 'true'. This class allows you to accept command parameters in the
            Execute and CanExecute callback methods.
            </summary>
            <typeparam name="T">The type of the command parameter.</typeparam>
        </member>
        <member name="M:TinyLittleMvvm.AsyncRelayCommand`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of the RelayCommand class.
            </summary>
            <param name="execute">The execution logic.</param>
            <param name="canExecute">The execution status logic.</param>
            <exception cref="T:System.ArgumentNullException">If the execute argument is null.</exception>
        </member>
        <member name="E:TinyLittleMvvm.AsyncRelayCommand`1.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether the command should execute.
            </summary>
        </member>
        <member name="M:TinyLittleMvvm.AsyncRelayCommand`1.RaiseCanExecuteChanged">
            <summary>
            Raises the <see cref="E:TinyLittleMvvm.AsyncRelayCommand`1.CanExecuteChanged" /> event.
            </summary>
        </member>
        <member name="M:TinyLittleMvvm.AsyncRelayCommand`1.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data 
            to be passed, this object can be set to a null reference</param>
            <returns>true if this command can be executed; otherwise, false.</returns>
        </member>
        <member name="M:TinyLittleMvvm.AsyncRelayCommand`1.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked. 
            </summary>
            <param name="parameter">Data used by the command. If the command does not require data 
            to be passed, this object can be set to a null reference</param>
        </member>
        <member name="T:TinyLittleMvvm.ValidationPropertyChangedBase">
            <summary>
            A base class for <see cref="T:TinyLittleMvvm.DialogViewModel"/> providing validation.
            </summary>
        </member>
        <member name="M:TinyLittleMvvm.ValidationPropertyChangedBase.AddValidationRule``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Func{``0,System.Boolean},System.String)">
            <summary>
            Adds a rule for validation.
            </summary>
            <param name="property">The property to validate.</param>
            <param name="validate">The function to validate the value of the property.</param>
            <param name="errorMsg">The error message if the validation fails.</param>
            <typeparam name="TProperty">The type of the property to validate.</typeparam>
        </member>
        <member name="M:TinyLittleMvvm.ValidationPropertyChangedBase.GetErrors(System.String)">
            <summary>
            Gets the validation errors for a specified property or for the entire entity.
            </summary>
            <returns>
            The validation errors for the property or entity.
            </returns>
            <param name="propertyName">The name of the property to retrieve validation errors for;
            or null or <see cref="F:System.String.Empty"/>, to retrieve entity-level errors.</param>
        </member>
        <member name="M:TinyLittleMvvm.ValidationPropertyChangedBase.NotifyOfPropertyChange(System.String)">
            <summary>
            Raises the <see cref="E:TinyLittleMvvm.PropertyChangedBase.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">The name of the changed property.</param>
        </member>
        <member name="M:TinyLittleMvvm.ValidationPropertyChangedBase.ValidateAllRules">
            <summary>
            Runs all validation rules.
            </summary>
            <returns><see langword="true"/> if all rules are valid; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:TinyLittleMvvm.ValidationPropertyChangedBase.HasErrors">
            <summary>
            Gets a value that indicates whether the entity has validation errors.
            </summary>
            <returns>
            true if the entity currently has validation errors; otherwise, false.
            </returns>
        </member>
        <member name="E:TinyLittleMvvm.ValidationPropertyChangedBase.ErrorsChanged">
            <summary>
            Occurs when the validation errors have changed for a property or for the entire entity.
            </summary>
        </member>
        <member name="M:TinyLittleMvvm.ValidationPropertyChangedBase.OnErrorsChanged(System.String)">
            <summary>
            Called when the validation state of a property has changed.
            </summary>
            <param name="propertyName">The name of the validated property.</param>
        </member>
        <member name="M:TinyLittleMvvm.ValidationPropertyChangedBase.Validate``1(System.Boolean,System.Linq.Expressions.Expression{System.Func{``0}},System.String)">
            <summary>
            Sets a property's error state.
            </summary>
            <param name="isValid"><see langword="true"/> if the property is valid; otherwise, <see langword="false"/>.</param>
            <param name="property">The validated property.</param>
            <param name="error">The error message.</param>
            <typeparam name="TProperty">The type of the property.</typeparam>
        </member>
        <member name="M:TinyLittleMvvm.ValidationPropertyChangedBase.Validate(System.Boolean,System.String,System.String)">
            <summary>
            Sets a property's error state.
            </summary>
            <param name="isValid"><see langword="true"/> if the property is valid; otherwise, <see langword="false"/>.</param>
            <param name="propertyName">The name of the validated property.</param>
            <param name="error">The error message.</param>
        </member>
        <member name="M:TinyLittleMvvm.ValidationPropertyChangedBase.AddError``1(System.Linq.Expressions.Expression{System.Func{``0}},System.String)">
            <summary>
            Adds a validation error message for a property.
            </summary>
            <param name="property">The validated property.</param>
            <param name="error">The error message.</param>
            <typeparam name="TProperty">The type of the validated property.</typeparam>
        </member>
        <member name="M:TinyLittleMvvm.ValidationPropertyChangedBase.AddError(System.String,System.String)">
            <summary>
            Adds a validation error message for a property.
            </summary>
            <param name="propertyName">The name of the validated property.</param>
            <param name="error">The error message.</param>
        </member>
        <member name="M:TinyLittleMvvm.ValidationPropertyChangedBase.RemoveError``1(System.Linq.Expressions.Expression{System.Func{``0}},System.String)">
            <summary>
            Removes a validation error message for a property.
            </summary>
            <param name="property">The validated property.</param>
            <param name="error">The error message.</param>
            <typeparam name="TProperty">The type of the validated property.</typeparam>
        </member>
        <member name="M:TinyLittleMvvm.ValidationPropertyChangedBase.RemoveError(System.String,System.String)">
            <summary>
            Removes a validation error message for a property.
            </summary>
            <param name="propertyName">The name of the validated property.</param>
            <param name="error">The error message.</param>
        </member>
        <member name="T:TinyLittleMvvm.ViewLocator">
            <summary>
            Provides methods to get a view instance for a given view model.
            </summary>
        </member>
        <member name="F:TinyLittleMvvm.ViewLocator.GetViewTypeFromViewModelType">
            <summary>
            The function to get the type of a view for a given view model type.
            </summary>
            <remarks>
            By default it takes the full name of the view model type, calls <see cref="F:TinyLittleMvvm.ViewLocator.GetViewTypeNameFromViewModelTypeName"/>
            and gets a type with the resulting name from the IoC container.
            E.g. if <see cref="F:TinyLittleMvvm.ViewLocator.GetViewTypeNameFromViewModelTypeName"/> is not changed, for type <em>MyApp.ViewModels.MyViewModel</em>
            it will return the type <em>MyApp.Views.MyView</em>
            </remarks>
        </member>
        <member name="F:TinyLittleMvvm.ViewLocator.GetViewTypeNameFromViewModelTypeName">
            <summary>
            This function returns for the full name of a view model type the corresponding name of the view type.
            </summary>
            <remarks>
            By default, this function simply replaces "ViewModel" with "View", e.g. for "MyApp.ViewModels.MyViewModel" it returns "MyApp.Views.MyView"
            </remarks>
        </member>
        <member name="M:TinyLittleMvvm.ViewLocator.GetViewForViewModel``1(Autofac.ILifetimeScope)">
            <summary>
            Gets the view for the passed view model.
            </summary>
            <param name="lifetimeScope">The optional scope of the IoC container to get the registered view from.</param>
            <typeparam name="TViewModel"></typeparam>
            <returns>The view matching the view model.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the view cannot be found in the IoC containmer.</exception>
            <remarks>
            <para>
            To get the correct view type of the given <typeparamref name="TViewModel"/>, this method will
            call <see cref="F:TinyLittleMvvm.ViewLocator.GetViewTypeFromViewModelType"/>.
            </para>
            <para>
            If <typeparamref name="TViewModel"/> implements <see cref="T:TinyLittleMvvm.IOnLoadedHandler"/> or <see cref="T:TinyLittleMvvm.IOnClosingHandler"/>,
            this method will register the view's corresponding events and call <see cref="M:TinyLittleMvvm.IOnLoadedHandler.OnLoadedAsync"/>
            and <see cref="M:TinyLittleMvvm.IOnClosingHandler.OnClosing"/> respectively when those events are raised.
            </para>
            <para>
            Don't call <strong>InitializeComponent()</strong> in your view's constructor yourself! If your view contains
            a method called InitializeComponent, this method will call it automatically via reflection.
            This allows the user of the library to remove the code-behind of her/his XAML files.
            </para>
            </remarks>
        </member>
        <member name="M:TinyLittleMvvm.ViewLocator.GetViewForViewModel(System.Object)">
            <summary>
            Gets the view for the passed view model.
            </summary>
            <param name="viewModel">The view model for which a view should be returned.</param>
            <returns>The view matching the view model.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the view cannot be found in the IoC containmer.</exception>
            <remarks>
            <para>
            To get the correct view type of the passed <paramref name="viewModel"/>, this method will
            call <see cref="F:TinyLittleMvvm.ViewLocator.GetViewTypeFromViewModelType"/>.
            </para>
            <para>
            If the <paramref name="viewModel"/> implements <see cref="T:TinyLittleMvvm.IOnLoadedHandler"/> or <see cref="T:TinyLittleMvvm.IOnClosingHandler"/>,
            this method will register the view's corresponding events and call <see cref="M:TinyLittleMvvm.IOnLoadedHandler.OnLoadedAsync"/>
            and <see cref="M:TinyLittleMvvm.IOnClosingHandler.OnClosing"/> respectively when those events are raised.
            </para>
            <para>
            Don't call <strong>InitializeComponent()</strong> in your view's constructor yourself! If your view contains
            a method called InitializeComponent, this method will call it automatically via reflection.
            This allows the user of the library to remove the code-behind of her/his XAML files.
            </para>
            </remarks>
        </member>
        <member name="T:TinyLittleMvvm.ViewModelPresenter">
            <summary>
            A content control presenting a view for a given view model via binding.
            </summary>
        </member>
        <member name="F:TinyLittleMvvm.ViewModelPresenter.ViewModelProperty">
            <summary>
            The dependency property for the bindable view model.
            </summary>
        </member>
        <member name="P:TinyLittleMvvm.ViewModelPresenter.ViewModel">
            <summary>
            The view model for which this control should display the corresponding view.
            </summary>
        </member>
    </members>
</doc>
