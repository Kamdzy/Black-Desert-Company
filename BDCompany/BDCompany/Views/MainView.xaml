<controls:MetroWindow x:Class="BDCompany.Views.MainView"
                      xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                      xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                      xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                      xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
                      mc:Ignorable="d"
                      xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
                      xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
                      xmlns:materialDesignConverters="clr-namespace:MaterialDesignThemes.Wpf.Converters;assembly=MaterialDesignThemes.Wpf"
                      xmlns:tinyLittleMvvm="clr-namespace:TinyLittleMvvm;assembly=TinyLittleMvvm"
                      xmlns:viewModels="clr-namespace:BDCompany.ViewModels"
                      xmlns:local="clr-namespace:BDCompany"
                      xmlns:views="clr-namespace:BDCompany.Views"
                      Title="{Binding Title}" Height="720" Width="1280"
                      d:DataContext="{d:DesignInstance viewModels:MainViewModel}"
                      GlowBrush="{DynamicResource AccentColorBrush}"
                      Style="{DynamicResource MyCleanWindowStyle}"
                      TitleAlignment="Left">

    <controls:MetroWindow.Flyouts>
        <controls:FlyoutsControl ItemsSource="{Binding Flyouts}" />
    </controls:MetroWindow.Flyouts>
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary
                    Source="pack://application:,,,/MahApps.Metro;component/Themes/HamburgerMenuTemplate.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <Style x:Key="MyCleanWindowStyle" TargetType="{x:Type controls:MetroWindow}"
                   BasedOn="{StaticResource CleanWindowStyleKey}" />

            <!--  This is the template for the menu items.  -->
            <DataTemplate x:Key="MenuItemTemplate" DataType="{x:Type controls:HamburgerMenuIconItem}">
                <Grid Height="48">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="48" />
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <ContentControl Grid.Column="0"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Content="{Binding Icon}"
                                    Focusable="False"
                                    IsTabStop="False" />
                    <TextBlock Grid.Column="1"
                               VerticalAlignment="Center"
                               FontSize="16"
                               Text="{Binding Label}" />
                </Grid>
            </DataTemplate>

            <ObjectDataProvider x:Key="DisplayModeEnumValues"
                                MethodName="GetValues"
                                ObjectType="{x:Type controls:SplitViewDisplayMode}">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="controls:SplitViewDisplayMode" />
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>

            <ObjectDataProvider x:Key="VisibilityEnumValues"
                                MethodName="GetValues"
                                ObjectType="{x:Type Visibility}">
                <ObjectDataProvider.MethodParameters>
                    <x:Type TypeName="Visibility" />
                </ObjectDataProvider.MethodParameters>
            </ObjectDataProvider>

            <materialDesignConverters:BrushRoundConverter x:Key="BrushRoundConverter" />

            <Style x:Key="HamburgerMenuCreatorsItemStyle"
                   BasedOn="{StaticResource HamburgerMenuItemStyle}"
                   TargetType="{x:Type ListBoxItem}">
                <Setter Property="controls:ItemHelper.ActiveSelectionBackgroundBrush" Value="Transparent" />
                <Setter Property="controls:ItemHelper.ActiveSelectionForegroundBrush"
                        Value="{DynamicResource AccentBaseColorBrush}" />
                <Setter Property="controls:ItemHelper.DisabledForegroundBrush"
                        Value="{DynamicResource GrayNormalBrush}" />
                <Setter Property="controls:ItemHelper.DisabledSelectedBackgroundBrush" Value="Transparent" />
                <Setter Property="controls:ItemHelper.DisabledSelectedForegroundBrush"
                        Value="{DynamicResource GrayNormalBrush}" />
                <Setter Property="controls:ItemHelper.HoverBackgroundBrush" Value="{DynamicResource GrayBrush9}" />
                <Setter Property="controls:ItemHelper.HoverSelectedBackgroundBrush"
                        Value="{DynamicResource GrayBrush9}" />
                <Setter Property="controls:ItemHelper.SelectedBackgroundBrush" Value="Transparent" />
                <Setter Property="controls:ItemHelper.SelectedForegroundBrush"
                        Value="{DynamicResource AccentBaseColorBrush}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <Grid Background="{TemplateBinding Background}"
                                  RenderOptions.ClearTypeHint="{TemplateBinding RenderOptions.ClearTypeHint}">
                                <Border x:Name="Border"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                <Grid Margin="{TemplateBinding BorderThickness}">
                                    <Grid HorizontalAlignment="Left"
                                          VerticalAlignment="Center"
                                          Visibility="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:HamburgerMenu}}, Path=ShowSelectionIndicator, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}">
                                        <Rectangle x:Name="SelectionIndicator"
                                                   Width="{DynamicResource HamburgerMenuSelectionIndicatorThemeWidth}"
                                                   Height="{DynamicResource HamburgerMenuSelectionIndicatorThemeHeight}"
                                                   Fill="{TemplateBinding Foreground}"
                                                   Focusable="False"
                                                   Opacity="0.0" />
                                    </Grid>
                                    <materialDesign:Ripple Padding="{TemplateBinding Padding}"
                                                           HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                           VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                                           Content="{TemplateBinding Content}"
                                                           ContentTemplate="{TemplateBinding ContentTemplate}"
                                                           ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                                                           Feedback="{TemplateBinding Foreground, Converter={StaticResource BrushRoundConverter}}"
                                                           Focusable="False"
                                                           SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </Grid>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Foreground"
                                            Value="{Binding RelativeSource={RelativeSource Self}, Path=(controls:ItemHelper.SelectedForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="Border" Property="Background"
                                            Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.SelectedBackgroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="SelectionIndicator" Property="Opacity" Value="1.0" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="True" />
                                        <Condition Property="Selector.IsSelectionActive" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Foreground"
                                            Value="{Binding RelativeSource={RelativeSource Self}, Path=(controls:ItemHelper.ActiveSelectionForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="Border" Property="Background"
                                            Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.ActiveSelectionBackgroundBrush), Mode=OneWay}" />
                                </MultiTrigger>

                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True" />
                                        <Condition Property="IsSelected" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background"
                                            Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.HoverSelectedBackgroundBrush), Mode=OneWay}" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True" />
                                        <Condition Property="IsSelected" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background"
                                            Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ItemHelper.HoverBackgroundBrush), Mode=OneWay}" />
                                </MultiTrigger>

                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Foreground"
                                            Value="{Binding RelativeSource={RelativeSource Self}, Path=(controls:ItemHelper.DisabledForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="Border" Property="Background"
                                            Value="{Binding RelativeSource={RelativeSource Self}, Path=(controls:ItemHelper.DisabledBackgroundBrush), Mode=OneWay}" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsEnabled" Value="False" />
                                        <Condition Property="IsSelected" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Foreground"
                                            Value="{Binding RelativeSource={RelativeSource Self}, Path=(controls:ItemHelper.DisabledSelectedForegroundBrush), Mode=OneWay}" />
                                    <Setter TargetName="Border" Property="Background"
                                            Value="{Binding RelativeSource={RelativeSource Self}, Path=(controls:ItemHelper.DisabledSelectedBackgroundBrush), Mode=OneWay}" />
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="HamburgerMenuCreatorsStyle"
                   BasedOn="{StaticResource {x:Type controls:HamburgerMenu}}"
                   TargetType="{x:Type controls:HamburgerMenu}">
                <Setter Property="ItemContainerStyle" Value="{StaticResource HamburgerMenuCreatorsItemStyle}" />
                <Setter Property="OptionsItemContainerStyle" Value="{StaticResource HamburgerMenuCreatorsItemStyle}" />
                <Setter Property="PaneBackground" Value="{DynamicResource WhiteBrush}" />
                <Setter Property="PaneForeground" Value="{DynamicResource TextBrush}" />
                <Setter Property="ShowSelectionIndicator" Value="True" />
            </Style>

        </ResourceDictionary>
    </Window.Resources>

    <Grid>
        <Grid.Resources>
            <DataTemplate x:Key="MenuItemTemplate" DataType="{x:Type local:CustomHamburgerMenuIconItem}">
                <Grid x:Name="RootGrid"
                      Height="48"
                      Background="Transparent">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="48" />
                        <ColumnDefinition />
                    </Grid.ColumnDefinitions>
                    <ContentControl Grid.Column="0"
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center"
                                    Content="{Binding Icon}"
                                    Focusable="False" />
                    <TextBlock Grid.Column="1"
                               VerticalAlignment="Center"
                               FontSize="16"
                               Foreground="White"
                               Text="{Binding Label}" />
                </Grid>
                <DataTemplate.Triggers>
                    <DataTrigger
                        Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type controls:HamburgerMenu}}, Path=IsPaneOpen}"
                        Value="False">
                        <Setter Property="ToolTip" Value="{Binding ToolTip, Mode=OneWay}" />
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

        </Grid.Resources>

        <Border BorderBrush="{DynamicResource AccentBaseColorBrush}"
                BorderThickness="0,0,0,0">

            <controls:HamburgerMenu x:Name="HamburgerMenuControl"
                                    HamburgerWidth="48"
                                    IsPaneOpen="False"
                                    ItemInvoked="HamburgerMenuControl_OnItemInvoked"
                                    ItemTemplate="{StaticResource MenuItemTemplate}"
                                    OptionsItemTemplate="{StaticResource MenuItemTemplate}"
                                    SelectedIndex="0"
                                    Style="{StaticResource HamburgerMenuCreatorsStyle}"
                                    VerticalScrollBarOnLeftSide="False"
                                    HamburgerHeight="0"
                                    HamburgerVisibility="Hidden">
                <!--  Items  -->
                <controls:HamburgerMenu.ItemsSource>
                    <controls:HamburgerMenuItemCollection>
                        <controls:HamburgerMenuIconItem Icon="{iconPacks:Material Kind=Home}" Label="Home"
                                                        ToolTip="News">
                            <controls:HamburgerMenuIconItem.Tag>
                                <Border BorderThickness="1,1,0,0" BorderBrush="{DynamicResource AccentBaseColorBrush}">
                                    <tinyLittleMvvm:ViewModelPresenter
                                        ViewModel="{Binding ShowSampleFlyoutCommand}" />
                                </Border>
                            </controls:HamburgerMenuIconItem.Tag>
                        </controls:HamburgerMenuIconItem>
                        <controls:HamburgerMenuIconItem Icon="{iconPacks:Material Kind=AccountCircle}"
                                                        Label="BDOPlanner" ToolTip="BDOPlanner">
                            <controls:HamburgerMenuIconItem.Tag>
                                <Border BorderThickness="1,1,0,0" BorderBrush="{DynamicResource AccentBaseColorBrush}">
                                    <tinyLittleMvvm:ViewModelPresenter
                                        ViewModel="{Binding ShowSampleFlyoutCommand}" />
                                </Border>
                            </controls:HamburgerMenuIconItem.Tag>
                        </controls:HamburgerMenuIconItem>
                        <controls:HamburgerMenuIconItem Icon="{iconPacks:Octicons Kind=Briefcase}"
                                                        Command="{Binding ShowSampleDialogCommand}"
                                                        Label="Beer Calculator" ToolTip="Beer Calculator">
                            <controls:HamburgerMenuIconItem.Tag>
                                <Border BorderThickness="1,1,0,0" BorderBrush="{DynamicResource AccentBaseColorBrush}">
                                    <tinyLittleMvvm:ViewModelPresenter
                                        ViewModel="{Binding ShowSampleFlyoutCommand}" />
                                </Border>
                            </controls:HamburgerMenuIconItem.Tag>
                        </controls:HamburgerMenuIconItem>
                    </controls:HamburgerMenuItemCollection>
                </controls:HamburgerMenu.ItemsSource>

                <!--  Options  -->
                <controls:HamburgerMenu.OptionsItemsSource>
                    <controls:HamburgerMenuItemCollection>
                        <controls:HamburgerMenuIconItem Icon="{iconPacks:Material Kind=Settings}" Label="Settings"
                                                        ToolTip="Settings" Command="{Binding ShowSampleFlyoutCommand}">
                            <controls:HamburgerMenuIconItem.Tag>
                                <Border BorderThickness="1,1,0,0" BorderBrush="{DynamicResource AccentBaseColorBrush}">
                                    <Grid>
                                        <tinyLittleMvvm:ViewModelPresenter
                                            ViewModel="{Binding ShowSampleFlyoutCommand}" />
                                    </Grid>
                                </Border>
                            </controls:HamburgerMenuIconItem.Tag>
                        </controls:HamburgerMenuIconItem>
                        <controls:HamburgerMenuIconItem Icon="{iconPacks:Material Kind=Account}" Label="About"
                                                        ToolTip="About" Command="{Binding ShowSampleFlyoutCommand}">
                            <controls:HamburgerMenuIconItem.Tag>
                                <Border BorderThickness="1,1,0,0" BorderBrush="{DynamicResource AccentBaseColorBrush}">
                                    <tinyLittleMvvm:ViewModelPresenter
                                        ViewModel="{Binding ShowSampleFlyoutCommand}" />
                                </Border>
                            </controls:HamburgerMenuIconItem.Tag>
                        </controls:HamburgerMenuIconItem>
                    </controls:HamburgerMenuItemCollection>
                </controls:HamburgerMenu.OptionsItemsSource>

                <controls:HamburgerMenu.ContentTemplate>
                    <DataTemplate DataType="{x:Type controls:HamburgerMenuIconItem}">
                        <Grid Margin="0 0 0 0">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <ScrollViewer Grid.Row="1"
                                          Focusable="False"
                                          HorizontalScrollBarVisibility="Disabled"
                                          VerticalScrollBarVisibility="Auto">
                                <ContentControl Content="{Binding Tag}" Focusable="False" />
                            </ScrollViewer>
                        </Grid>
                    </DataTemplate>
                </controls:HamburgerMenu.ContentTemplate>

            </controls:HamburgerMenu>

        </Border>
    </Grid>

</controls:MetroWindow>